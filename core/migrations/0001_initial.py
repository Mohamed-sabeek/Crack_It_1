
# Generated by Django 5.2.6 on 2025-09-19 18:22

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DailyQuiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('option_a', models.CharField(max_length=100)),
                ('option_b', models.CharField(max_length=100)),
                ('option_c', models.CharField(max_length=100)),
                ('option_d', models.CharField(max_length=100)),
                ('correct_option', models.CharField(blank=True, choices=[('A', 'Option A'), ('B', 'Option B'), ('C', 'Option C'), ('D', 'Option D')], help_text='Select the correct option (A, B, C or D).', max_length=1, null=True)),
            ],
            options={
                'verbose_name': 'Daily Quiz Question',
                'verbose_name_plural': 'Daily Quiz Questions',
            },
        ),
        migrations.CreateModel(
            name='Formula',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(choices=[('Biology', 'Biology'), ('Chemistry', 'Chemistry'), ('Physics', 'Physics'), ('Maths', 'Maths'), ('Economics', 'Economics'), ('History', 'History'), ('Geography', 'Geography'), ('Political science', 'Political science'), ('Science', 'Science'), ('Tamil', 'Tamil'), ('English', 'English')], max_length=30)),
                ('heading', models.CharField(max_length=100)),
                ('formula', models.TextField(help_text='Unicode or HTML allowed')),
            ],
        ),
        migrations.CreateModel(
            name='InterviewQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(choices=[('civil_engineering', 'Civil Engineering'), ('mechanical_engineering', 'Mechanical Engineering'), ('eee', 'Electrical & Electronics Engineering (EEE)'), ('ece', 'Electronics & Communication (ECE)'), ('cse_it', 'Computer Science & IT'), ('chemical_engineering', 'Chemical Engineering'), ('aerospace_engineering', 'Aerospace Engineering'), ('biomedical_engineering', 'Biomedical Engineering'), ('industrial_engineering', 'Industrial Engineering'), ('physics', 'Physics'), ('chemistry', 'Chemistry'), ('mathematics_statistics', 'Mathematics / Statistics'), ('botany', 'Botany'), ('zoology', 'Zoology'), ('biotechnology_microbiology', 'Biotechnology / Microbiology'), ('environmental_science_ecology', 'Environmental Science / Ecology'), ('geology_geography', 'Geology / Geography'), ('mbbs', 'MBBS'), ('bds', 'BDS'), ('nursing', 'Nursing'), ('pharmacy', 'Pharmacy'), ('physiotherapy', 'Physiotherapy'), ('public_health', 'Public Health'), ('history', 'History'), ('political_science', 'Political Science'), ('sociology_social_work', 'Sociology / Social Work'), ('psychology', 'Psychology'), ('philosophy_ethics', 'Philosophy / Ethics'), ('languages', 'Languages'), ('fine_arts_performing_arts', 'Fine Arts / Performing Arts'), ('commerce_accounting', 'Commerce / Accounting'), ('business_admin_management', 'Business Admin / Management'), ('llb_llm', 'LLB / LLM'), ('education', 'Education'), ('library_information_science', 'Library & Information Science'), ('hotel_management', 'Hotel Management'), ('agriculture_horticulture_forestry', 'Agriculture / Horticulture / Forestry'), ('veterinary', 'Veterinary')], max_length=50)),
                ('question', models.TextField()),
                ('answer', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='E.g., Early Civilizations, Freedom Struggle, etc.', max_length=100, null=True)),
                ('subject', models.CharField(blank=True, choices=[('Biology(Botany)', 'Biology(Botany)'), ('Biology(Zoology)', 'Biology(Zoology)'), ('Chemistry', 'Chemistry'), ('History', 'History'), ('Geography', 'Geography'), ('Economics', 'Economics'), ('Science', 'Science'), ('Tamil', 'Tamil'), ('English', 'English'), ('Maths', 'Maths'), ('Political science', 'Political science'), ('Physics', 'Physics')], help_text='Select the subject', max_length=30, null=True)),
                ('word', models.CharField(max_length=50)),
                ('meaning', models.TextField(help_text='Multi-line notes, mentions, emojis are allowed.')),
            ],
        ),
        migrations.CreateModel(
            name='MockTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(blank=True, max_length=100, null=True)),
                ('class_level', models.PositiveSmallIntegerField(blank=True, choices=[(6, 'Class 6'), (7, 'Class 7'), (8, 'Class 8'), (9, 'Class 9'), (10, 'Class 10'), (11, 'Class 11'), (12, 'Class 12')], null=True)),
                ('description', models.TextField()),
                ('date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='PreviousPaper',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('year', models.IntegerField()),
                ('exam_type', models.CharField(blank=True, choices=[('Prelims', 'Prelims'), ('Main', 'Main')], max_length=10, null=True)),
                ('file', models.FileField(upload_to='papers/')),
            ],
        ),
        migrations.CreateModel(
            name='Syllabus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('board', models.CharField(max_length=50)),
                ('class_level', models.IntegerField()),
                ('subject', models.CharField(max_length=50)),
                ('content', models.TextField()),
                ('pdf', models.FileField(blank=True, null=True, upload_to='syllabus_pdfs/')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AIChatHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conversation_id', models.CharField(blank=True, db_index=True, max_length=36, null=True)),
                ('messages', models.JSONField(default=list)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='DailyQuizAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_attempt', models.DateField()),
                ('score', models.IntegerField(blank=True, null=True)),
                ('percent', models.IntegerField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('option_a', models.CharField(max_length=255)),
                ('option_b', models.CharField(max_length=255)),
                ('option_c', models.CharField(max_length=255)),
                ('option_d', models.CharField(max_length=255)),
                ('correct_option', models.CharField(max_length=1)),
                ('mock_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='core.mocktest')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField()),
                ('test_name', models.CharField(max_length=100)),
                ('taken_on', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TestAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField()),
                ('taken_on', models.DateTimeField(auto_now_add=True)),
                ('mock_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='core.mocktest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_attempts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_option', models.CharField(max_length=1)),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='core.testattempt')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.question')),
            ],
        ),
    ]
